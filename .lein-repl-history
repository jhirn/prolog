(use :reload-all 'prolog-core)
(test-prove)
(<- (predicate1 arg0a arg1a) (predicate2 arg0b arg1b))
(<- (painter raoul))
(<- (painter ?x) (hungry ?x) (smells-of ?x turpentine))
(<- (hungry raoul))
(<- (smells-of raoul turpentine))
(?- (painter ?x))
(<- (member ?x [?x ?rest]))
(<- (member ?x [? ?rest]) (member ?x ?rest))
(?- (member ?x (a b)))
(?- (member b (a b)))
(?- (member ? (a b)))
(?- (member ?y (a b)))
(?- (member ?y (?z b)))
(?- (member ?y (?z ?r)))
(?- (member ?y (?z a)))
(?- (member ?y (a b c d)))
(?- (member ?y (member ?x (a b c ))))
(unify '[?x ?y ?z] '(1 2 3 4 5) {})
(unify '[?x ?y ?z] '(1 2 3 3 4 5 4 5) {})
(unify '[?x ?y ?z] '(1 2 3 3 4 5 4 (4 5)) {})
(unify '[?x ?y ?z] '(1 4 3 3 4 5 4 (4 5)) {})
(unify '[?x ?y ?z] '(1 (4 5) 3 3 4 5 4 (4 5)) {})
(unify '[?x ?y ?z ?x] '(1 (4 5) 3 3 4 5 4 (4 5)) {})
(unify '[?x ?y ?z ?b] '(1 (4 5) 3 3 4 5 4 (4 5)) {})
(?- (member a (a b)) (prolog.core/prolog-print true))
(cons 4 5)
(cons 4 '())
(cons 5 (cons 4 '()))
(type? (cons 5 (cons 4 '())))
(consp (cons 5 (cons 4 '())))
(consp '())
'()
(type '())
(type (cons 4 '()))
(consp [])
clauses
(clause-head [4 5 6])
(clause-head '(4 5 6))
cdr
(consp [4 5 6])
(consp '(4 5 6))
(use 'clojure.tools.trace)
(trace (* 2 3))
